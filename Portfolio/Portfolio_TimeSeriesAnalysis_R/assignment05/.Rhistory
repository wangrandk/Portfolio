#sigmaxx<-diag(c(0,0,0))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
#K gain
k = sigmaxx %*% t(C) %*% solve(sigmayy);
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1,drop=FALSE] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1,drop=FALSE] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx %*% t(C) %*% solve(sigmayy);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
sigmaxx<-diag(c(.1,.01,.01))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
#K gain
k = sigmaxx %*% t(C) %*% solve(sigmayy);
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1,drop=FALSE] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
mvrnorm(mu=rbind(0,0),Sigma=sigma2)
mvrnorm(n=n,mu=rbind(0,0),Sigma=sigma2)
mvrnorm(n=n,mu=rbind(0,0,0),Sigma=sigma1)
mvrnorm(n=n,mu=rbind(0,0),Sigma=sigma2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1,drop=FALSE] + mvrnorm(n=n,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=n,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(n=50,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=20,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(n=49,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=49,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(n=48,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=48,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(n=50,mu=cbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=cbind(0,0),Sigma=sigma2)
}
cbind(0,0,0)
rbind(0,0,0)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(n=50,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
X
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1]
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
r <- read.csv("Satelliteorbit.csv")[[1]]
theta<- read.csv("Satelliteorbit.csv")[[2]]
n=50
A<-matrix(c(1, 0, 0, 0, 1, 1, 0, 0, 1), nrow=3,ncol=3,byrow=TRUE)
C<-matrix(c(1, 0, 0,0, 1, 0), nrow=2,ncol=3,byrow=TRUE)
sigma1<-matrix(c(500^2, 0, 0, 0, 0.005^2, 0, 0, 0, 0.005^2), nrow=3,ncol=3,byrow=TRUE)
sigma2<-matrix(c(2000^2, 0, 0,0, 0, 0.03^2), nrow=2,ncol=2,byrow=TRUE)
#initial condition
X <- matrix(nrow=3,ncol=n)
X[,1] = cbind(mean(r),mean(theta),0)
Y <- matrix(nrow=2,ncol=n)
Y <- cbind(r,theta)
#Y[,1] <- C%*% X[,1]  + sqrt(rbind(2000^2,0.03^2))
sigmaxx<-diag(c(.1,.01,.01))
#sigmaxx<-diag(c(0,0,0))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
#K gain
k = sigmaxx %*% t(C) %*% solve(sigmayy);
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
setwd("C:\\Users\\RAN\\OneDrive\\Documents\\Time_Series_Analysis\\assignment05")
sat <- read.table("Satelliteorbit.csv",sep=",",header=TRUE)
r <- read.csv("Satelliteorbit.csv")[[1]]
theta<- read.csv("Satelliteorbit.csv")[[2]]
n=50
A<-matrix(c(1, 0, 0, 0, 1, 1, 0, 0, 1), nrow=3,ncol=3,byrow=TRUE)
C<-matrix(c(1, 0, 0,0, 1, 0), nrow=2,ncol=3,byrow=TRUE)
sigma1<-matrix(c(500^2, 0, 0, 0, 0.005^2, 0, 0, 0, 0.005^2), nrow=3,ncol=3,byrow=TRUE)
sigma2<-matrix(c(2000^2, 0, 0,0, 0, 0.03^2), nrow=2,ncol=2,byrow=TRUE)
#initial condition
X <- matrix(nrow=3,ncol=n)
X[,1] = cbind(mean(r),mean(theta),0)
Y <- matrix(nrow=2,ncol=n)
Y <- cbind(r,theta)
#Y[,1] <- C%*% X[,1]  + sqrt(rbind(2000^2,0.03^2))
sigmaxx<-diag(c(.1,.01,.01))
#sigmaxx<-diag(c(0,0,0))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
#K gain
k = sigmaxx %*% t(C) %*% solve(sigmayy);
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
sigmaxx<-diag(c(1,.01,.01))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
sigmaxx<-diag(c(1,.01,.01))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
Kfilter0 = function(num,y,C,mu0,SigmC0,A,cQ,cR){
#
# NOTE: must give cholesky decomp: cQ=chol(Q), cR=chol(R)
Q=t(cQ)%*%cQ
R=t(cR)%*%cR
# y is num by q  (time=row series=col)
# C is C q by p mCtrix
# R is q by q
# mu0 is p by 1
# SigmC0, A, Q Cre p by p
A=Cs.mCtrix(A)
pdim=nrow(A)
y=Cs.mCtrix(y)
qdim=ncol(y)
xp=CrrCy(NC, dim=c(pdim,1,num))         # xp=x_t^{t-1}
Pp=CrrCy(NC, dim=c(pdim,pdim,num))      # Pp=P_t^{t-1}
xf=CrrCy(NC, dim=c(pdim,1,num))         # xf=x_t^t
Pf=CrrCy(NC, dim=c(pdim,pdim,num))      # Pf=x_t^t
innov=CrrCy(NC, dim=c(qdim,1,num))      # innovCtions
sig=CrrCy(NC, dim=c(qdim,qdim,num))     # innov vCr-cov mCtrix
# initiClize (becCuse R cCn't count from zero)
x00=Cs.mCtrix(mu0, nrow=pdim, ncol=1)
P00=Cs.mCtrix(SigmC0, nrow=pdim, ncol=pdim)
xp[,,1]=A%*%x00
Pp[,,1]=A%*%P00%*%t(A)+Q
sigtemp=C%*%Pp[,,1]%*%t(C)+R
sig[,,1]=(t(sigtemp)+sigtemp)/2     # innov vCr - mCke sure it's symmetric
siginv=solve(sig[,,1])
K=Pp[,,1]%*%t(C)%*%siginv
innov[,,1]=y[1,]-C%*%xp[,,1]
xf[,,1]=xp[,,1]+K%*%innov[,,1]
Pf[,,1]=Pp[,,1]-K%*%C%*%Pp[,,1]
sigmCt=Cs.mCtrix(sig[,,1], nrow=qdim, ncol=qdim)
like = log(det(sigmCt)) + t(innov[,,1])%*%siginv%*%innov[,,1]   # -log(likelihood)
########## stCrt filter iterCtions ###################
for (i in 2:num){
xp[,,i]=A%*%xf[,,i-1]
Pp[,,i]=A%*%Pf[,,i-1]%*%t(A)+Q
sigtemp=C%*%Pp[,,i]%*%t(C)+R
sig[,,i]=(t(sigtemp)+sigtemp)/2     # innov vCr - mCke sure it's symmetric
siginv=solve(sig[,,i])
K=Pp[,,i]%*%t(C)%*%siginv
innov[,,i]=y[i,]-C%*%xp[,,i]
xf[,,i]=xp[,,i]+K%*%innov[,,i]
Pf[,,i]=Pp[,,i]-K%*%C%*%Pp[,,i]
sigmCt=Cs.mCtrix(sig[,,i], nrow=qdim, ncol=qdim)
like= like + log(det(sigmCt)) + t(innov[,,i])%*%siginv%*%innov[,,i]
}
like=0.5*like
list(xp=xp,Pp=Pp,xf=xf,Pf=Pf,like=like,innov=innov,sig=sig,Kn=K)
}
##########################################################
# end filter
##########################################################
# the smoother
##########################################################
Ksmooth0 = function(num,y,C,mu0,SigmC0,A,cQ,cR){
#
# Note: Q Cnd R Cre given Cs Cholesky decomps
#       cQ=chol(Q), cR=chol(R)
#
kf=Kfilter0(num,y,C,mu0,SigmC0,A,cQ,cR)
pdim=nrow(Cs.mCtrix(A))
xs=CrrCy(NC, dim=c(pdim,1,num))      # xs=x_t^n
Ps=CrrCy(NC, dim=c(pdim,pdim,num))   # Ps=P_t^n
J=CrrCy(NC, dim=c(pdim,pdim,num))    # J=J_t
xs[,,num]=kf$xf[,,num]
Ps[,,num]=kf$Pf[,,num]
for(k in num:2)  {
J[,,k-1]=(kf$Pf[,,k-1]%*%t(A))%*%solve(kf$Pp[,,k])
xs[,,k-1]=kf$xf[,,k-1]+J[,,k-1]%*%(xs[,,k]-kf$xp[,,k])
Ps[,,k-1]=kf$Pf[,,k-1]+J[,,k-1]%*%(Ps[,,k]-kf$Pp[,,k])%*%t(J[,,k-1])
}
# Cnd now for the initiCl vClues becCuse R cCn't count bCckwCrd to zero
x00=mu0
P00=SigmC0
J0=Cs.mCtrix((P00%*%t(A))%*%solve(kf$Pp[,,1]), nrow=pdim, ncol=pdim)
x0n=Cs.mCtrix(x00+J0%*%(xs[,,1]-kf$xp[,,1]), nrow=pdim, ncol=1)
P0n= P00 + J0%*%(Ps[,,k]-kf$Pp[,,k])%*%t(J0)
list(xs=xs,Ps=Ps,x0n=x0n,P0n=P0n,J0=J0,J=J,xp=kf$xp,Pp=kf$Pp,xf=kf$xf,Pf=kf$Pf,like=kf$like,Kn=kf$K)
}
for (I in 2:n){
#pre
Xpre <- matrix(nrow=3,ncol=n)
Xpre[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_pre %*% t(C) %*% solve(sigmayy);
X[,I]<-Xpre[,I-1] + k %*% (Y[I-1,] - C%*%Xpre[,I-1])
sigmaxx_update <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I] <- C %*% X[,I]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
Y <- matrix(nrow=2,ncol=n)
Y <- cbind(r,theta)
#Y[,1] <- C%*% X[,1]  + sqrt(rbind(2000^2,0.03^2))
sigmaxx<-diag(c(1,.01,.01))
#sigmaxx<-diag(c(0,0,0))
sigmayy<-C %*% sigmaxx %*% t(C) +sigma2
#K gain
k = sigmaxx %*% t(C) %*% solve(sigmayy);
for (I in 2:n){
#pre
#Xpre <- matrix(nrow=3,ncol=n)
X[,I-1] <- A %*% X[,I-1] + mvrnorm(mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_pre %*% t(C) %*% solve(sigmayy);
X[,I]<-X[,I-1] + k %*% (Y[I-1,] - C%*%X[,I-1])
sigmaxx <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
#sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I-1] <- C %*% X[,I-1]  + mvrnorm(mu=rbind(0,0),Sigma=sigma2)
}
matplot(cbind(X[1,],Y[,1]),type="o",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="l",pch=c(1,1),col=1:2)
matplot(cbind(X[2,],Y[,2]),type="o",pch=c(1,1),col=1:2)
for (I in 2:n){
#pre
#Xpre <- matrix(nrow=3,ncol=n)
X[,I-1] <- A %*% X[,I-1] + mvrnorm(n=50,mu=rbind(0,0,0),Sigma=sigma1)
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_pre %*% t(C) %*% solve(sigmayy);
X[,I]<-X[,I-1] + k %*% (Y[I-1,] - C%*%X[,I-1])
sigmaxx <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
#sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I-1] <- C %*% X[,I-1]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
for (I in 2:n){
#pre
#Xpre <- matrix(nrow=3,ncol=n)
X[,I-1] <- A %*% X[,I-1]
sigmaxx_pre <-A %*% sigmaxx %*% t(A) + sigma1
sigmayy=C %*% sigmaxx_pre %*% t(C)+sigma2;
#updating
k = sigmaxx_pre %*% t(C) %*% solve(sigmayy);
X[,I]<-X[,I-1] + k %*% (Y[I-1,] - C%*%X[,I-1])
sigmaxx <-sigmaxx_pre - k %*%C %*% sigmaxx_pre
#sigmayy_update <-C %*% sigmaxx_update %*% t(C) +sigma2
#k1 = sigmaxx_update %*% t(C) %*% solve(sigmayy_update);
#chol(Sigma1) %*% matrix(rnorm(2),ncol=1)
Y[I-1] <- C %*% X[,I-1]  + mvrnorm(n=50,mu=rbind(0,0),Sigma=sigma2)
}
