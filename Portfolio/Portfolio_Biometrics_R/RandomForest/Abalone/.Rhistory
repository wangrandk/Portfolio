ysignal <<- with(x, .5 * X1^2 + sin(X2*pi) + X3 * X4) #y = x1^2 + sin(x2) + x3 * x4
ynoise = rnorm(dim(x)[1],mean=0,sd=sd(ysignal)/SNR)
cat("actucal signal to noise ratio, SNR: nn", round(sd(ysignal)/sd(ynoise),2))
y = ysignal + ynoise
}
y = hidden.function(X)
y = hidden.function(X)
y = hidden.function(X)
y
plot(data.frame(y,X[,1:4]),col="#00004520")
y = hidden.function(X)
plot(data.frame(y,X[,1:4]),col="#00004520")
print(cor(X,y))
RF = randomForest(x=X,y=y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
par(mfrow=c(1,2))
plot(RF$predicted,y,
col="#12345678",
main="prediction plot",
xlab="predicted reponse",
ylab="actual response")
abline(lm(y~yhat,data.frame(y=RF$y,yhat=RF$predicted)))
plot(data.frame(y,X[,1:4]),col="#00004520")
plot(data.frame(y,X[,1:6]),col="#00004520")
print(cor(X,y))
rm(list=ls())
X <- read.table("prostatedata.txt", header = TRUE, sep = ";", dec = ",")
rm(list=ls())
load(file="prostata.rda")
rm(list=ls())
load(file="prostata.rda")
rm(list=ls())
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/RandomForest/Abalone")
load(file="prostata.rda")
summary(prostate)
RF = randomForest(x=x,y=y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
x=prostata.x
x=prostata$x
x=prostate$x
y=prostate$y
RF = randomForest(x=x,y=y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
par(mfrow=c(1,2))
plot(RF$predicted,y,
col="#12345678",
main="prediction plot",
xlab="predicted reponse",
ylab="actual response")
abline(lm(y~yhat,data.frame(y=RF$y,yhat=RF$predicted)))
print(RF)
plot(RF$predicted)
plot(RF$predicted,y)
plot(RF$predicted,y,
col="#12345678",
main="prediction plot",
xlab="predicted reponse",
ylab="actual response")
yhat
RF$y
RF$predicted
print(RF)
RF.confusion
RF$confusion
mosaicplot(RF$confusion)
mosaicplot(RF$confusion,shade=TRUE)
mosaicplot(table(RF$confusion),shade=TRUE)
mosaicplot(RF$confusion,shade=TRUE)
y
yhat
yhat=RF$predicted
yhat
RF$rsq
par(mfrow=c(1,1))
plot(RF$rsq,type="l",log="x",
ylab="prediction performance, pseudo R2",
xlab="n trees used")
print(RF)
RF$importance
varImpPlot(RF)
?varImpPlot
?sample
X2=sample(x, 34, replace = FALSE, prob = NULL)
X2
x
x
X2=x[sample(102,34),]
X2=x[sample(102,34),]
X2=x[sample(102,34),]
pred.y = predict(RF,X2)
pred.y
pred
pred.y
par(mfrow=c(1,1))
plot(pred.y,y,
main= "test-set prediction",
xlab= "predict reponse",
ylab= "true response",
col=rgb(0,0,abs(pred.y/max(pred.y)),alpha=.9))
abline(lm(true.y~pred.y,data.frame(true.y,pred.y)))
y
?table
as.table(y,pred.y)
table(y,pred.y)
s=sample(102,34)
X2=x[s,]
true.y = y[s,]
true.y = y[s]
true.y
numeric(pred.y)
mosaicplot(table(true.y,pred.y),shade=TRUE)
table(true.y,pred.y)
s=sample(102,34)
X2=x[s,]
true.y = y[s]
pred.y = predict(RF,X2)
par(mfrow=c(1,1))
plot(pred.y,true.y,
main= "test-set prediction",
xlab= "predict reponse",
ylab= "true response",
ylab= "true response")
plot(pred.y,true.y,
main= "test-set prediction",
xlab= "predict reponse",
ylab= "true response")
mosaicplot(table(true.y,pred.y),shade=TRUE)
table(true.y,pred.y)
t=table(true.y,pred.y)
mosaicplot(t,shade=TRUE)
s=sample(102,34)
X2=x[s,]
true.y = y[s]
pred.y = predict(RF,X2)
par(mfrow=c(1,1))
plot(pred.y,true.y,
main= "test-set prediction",
xlab= "predict reponse",
ylab= "true response")
abline(lm(true.y~pred.y,data.frame(true.y,pred.y)))
t=table(true.y,pred.y)
mosaicplot(t,shade=TRUE)
s=sample(102,34)
X2=x[s,]
true.y = y[s]
pred.y = predict(RF,X2)
par(mfrow=c(1,1))
plot(pred.y,true.y,
main= "test-set prediction",
xlab= "predict reponse",
ylab= "true response")
t=table(true.y,pred.y)
mosaicplot(t,shade=TRUE)
t
print(RF)
51/48
t
19/15
library(forestFloor, warn.conflicts=FALSE, quietly = TRUE)
ff = forestFloor(RF,x)
ff = forestFloor(RF,X)
x=prostate$x
library(forestFloor, warn.conflicts=FALSE, quietly = TRUE)
ff = forestFloor(RF,x)
ff = forestFloor(RF,X2)
RF$importance
varImpPlot(RF)
print(RF)
RF$importance
library(forestFloor, warn.conflicts=FALSE, quietly = TRUE)
ff = forestFloor(RF,x)
ff = forestFloor(RF,y)
ff = forestFloor(RF,,calc_np=T)
ff = forestFloor(RF,x,calc_np=T)
as.matrix(x)
ff = forestFloor(RF,as.matrix(x),calc_np=T)
ff = forestFloor(as.matrix(RF),x,calc_np=T)
ff = forestFloor(RF,x,calc_np=T)
?forestFloor
ff = forestFloor(RF,data.frame(x),calc_np=T)
print(ff)
ff = forestFloor(RF,x,calc_np=T)
RF
par(mfrow=c(2,2))
pairs(x[,1:3],col=fcol(x,cols=2),main="single variable gradient, nn x2")
pairs(x[,1:3],col=fcol(x,cols=c(1:2)),main="double variable gradient, nn x1 & x2")
pairs(x[,1:3],col=fcol(x,cols=c(1:3)),main="triple variable gradient, nn x1 & x2 & x3")
pairs(x[,1:5],col=fcol(x,cols=c(1:5)),main="multi variable gradient, nn PCA of x1...x5")
Col = fcol(x,cols=c(1:3))
print(Col[1:5])
Col = fcol(ff,3,order=F)
plot(ff,col=Col)
show3d_new(ff,3:4,col=Col)
RF$importance
varImp(RF)
varImpPlot(RF)
?varImpPlot
nrow(RF$importance)
row(RF$importance)
RF$confusion
RF$votes
print(Col[1:5])
print(RF)
rm(list=ls())
load(file="abalone.rda")
library(randomForest)
RF = randomForest(x=~.-sex,y=sex,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
?randomForest
data(abalone)
data()
RF = randomForest(x=~.-sex,y=sex,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE;
data=abalone)
RF = randomForest(x=~.-sex,y=sex,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE,
data=abalone
data=abalone) #bootstrap with replacement?
RF = randomForest(x=~.-sex,y=sex,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE,
data=abalone)
RF = randomForest(x=~.,y=sex,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE)
x=abalone[-sex]
abalone$sex
abalone
x=abalone~.
x
View(abalone)
RF = randomForest(x=abalone[,2:8].,y=abalone[,1],
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE)
x=abalone[,2:8]
x=abalone[,2:9]
y=abalone[,1]
RF = randomForest(x=abalone[,2:9],y=abalone[,1],
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE)
rm(list=ls())
load(file="abalone.rda")
library(randomForest)
RF = randomForest(x=abalone[,2:9],y=abalone[,1],
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
x=abalone[,2:9]
y=abalone[,1]
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
x=abalone[,2:9]
y=abalone[,1]
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=5000, #how many trees
replace=FALSE)
print(RF)
par(mfrow=c(1,2))
plot(RF$predicted,y,
col="#12345678",
main="prediction plot",
xlab="predicted reponse",
ylab="actual response")
mosaicplot(RF$confusion,shade=TRUE)
par(mfrow=c(1,1))
plot(RF$rsq,type="l",log="x",
ylab="prediction performance, pseudo R2",
xlab="n trees used")
cat("explained variance, (pseudo R2) = 1- SSmodel/SStotal = nn",round(1-mean((RF$pred-y)^2)/var(y),3))
RF$importance
varImpPlot(RF)
RF$importance
?forestFloor
ff = forestFloor(RF,X)
ff = forestFloor(RF,x)
x=abalone[,2:9]
library(forestFloor, warn.conflicts=FALSE, quietly = TRUE)
ff = forestFloor(RF,x)
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
sampsize=4177,
replace=FALSE)
print(RF)
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
sampsize=4177)
print(RF)
ff = forestFloor(RF,x)
ff = forestFloor(RF,numeric(x)
ff = forestFloor(RF,numeric(x))
ff = forestFloor(RF,numeric(x))
X = data.frame(replicate(vars,rnorm(obs,mean=0,sd=1)))
obs = 2000
vars = 6
X = data.frame(replicate(vars,rnorm(obs,mean=0,sd=1)))
?data.frame
data.frame(x)
ff = forestFloor(RF,data.frame(x))
RF$y
ff = forestFloor(RF,data.frame(x,))
length(levels(RF$y)
length(levels(RF$y))
length(levels(RF$y))
?forestFloor
install.packages("rfFC")
install.packages("C:/Users/RAN/Downloads/reshape_0.8.5.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/RAN/Downloads/yaml_2.1.13.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/RAN/Downloads/RSAP_0.9.tar.gz", repos = NULL, type = "source")
x
ff = forestFloor(RF,x)
abalone
abalone = abalone[abalone$sex!='I']
abalone[1]
abalone$sex
abalone = abalone[abalone$sex!=I]
abalone = abalone[abalone$sex=I]
abalone = abalone[abalone$sex='I']
abalone = abalone[abalone$sex=!'I',]
abalone = abalone[abalone$sex!='I',]
abalone = abalone[!abalone$sex='I',]
abalone = abalone[abalone[1]='I',]
abalone = abalone[abalone[1]='I']
abalone = abalone[1]
abalone
load(file="abalone.rda")
library(randomForest)
abalone = abalone[abalone$sex!="I",]
View(abalone)
x=abalone[,2:9]
y=abalone[,1]
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
print(RF)
abalone = abalone[abalone$sex!="I",]
x=abalone[,2:9]
y=abalone[,1]
RF = randomForest(x,y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
abalone[,1]
x=abalone[,2:9]
y=abalone[,1]
abalone = abalone[abalone$sex!="I",]
abalone
abalone = abalone[abalone$sex!="I",]
X=abalone[,2:9]
Y=abalone[,1]
RF = randomForest(X,Y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
RF = randomForest(x=X,y=Y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
abalone[,1]
levels(y)
?level
?levels
y<-factor(c("F","M"))
levels(y)
Y=abalone[,1]
levels(Y)
Y = Y -"M"
Y=abalone[,1]
data.frame(y)
data.frame(Y)
Y=data.frame(Y)
RF = randomForest(x=X,y=Y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
?forestfloor
?forestFloor
abalone = abalone[abalone$sex!="I",]
X=abalone[,2:9]
Y=abalone[,1]
RF = randomForest(x=X,y=Y,
importance=TRUE, #extra diagnostics
keep.inbag=TRUE, #track of bootstrap process
ntree=500, #how many trees
replace=FALSE) #bootstrap with replacement?
levels(y)
load(file="abalone.rda")
x=abalone[,2:9]
y=abalone[,1]
levels(y)
print(RF)
ff = forestFloor(RF,x)
par(mfrow=c(2,2))
pairs(X[,1:3],col=fcol(X,cols=2),main="single variable gradient, nn X2")
pairs(X[,1:3],col=fcol(X,cols=c(1:2)),main="double variable gradient, nn X1 & X2")
pairs(X[,1:3],col=fcol(X,cols=c(1:3)),main="triple variable gradient, nn X1 & X2 & X3")
pairs(X[,1:5],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
Col = fcol(X,cols=c(1:3))
print(Col[1:5])
Col = fcol(ff,3,orderByImportance=T)
par(mfrow=c(2,2))
pairs(X[,1:3],col=fcol(X,cols=2),main="single variable gradient, nn X2")
pairs(X[,1:3],col=fcol(X,cols=c(1:2)),main="double variable gradient, nn X1 & X2")
pairs(X[,1:3],col=fcol(X,cols=c(1:3)),main="triple variable gradient, nn X1 & X2 & X3")
pairs(X[,1:5],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
abalone = abalone[abalone$sex="M" & abalone$sex="F",]
abalone = abalone[abalone$sex=="M" & abalone$sex=="F",]
Y=abalone[,1]
Y
X=abalone[,2:9]
X
abalone = abalone[abalone$sex=="M" && abalone$sex=="F",]
X=abalone[,2:9]
Y=abalone[,1]
Y
X
abalone = abalone[abalone$sex=="M"| abalone$sex=="F",]
X=abalone[,2:9]
Y=abalone[,1]
Y
abalone = abalone[abalone$sex=="M"|| abalone$sex=="F",]
X=abalone[,2:9]
Y=abalone[,1]
Y
abalone = abalone[abalone$sex=="I"]
abalone = abalone[abalone$sex=="I",]
X=abalone[,2:9]
Y=abalone[,1]
Y
abalone = abalone[abalone$sex!="I",]
X=abalone[,2:9]
Y=abalone[,1]
Y
rm(list=ls())
load(file="abalone.rda")
library(randomForest)
abalone = abalone[abalone$sex=="M"|| abalone$sex=="F",]
X=abalone[,2:9]
Y=abalone[,1]
Y
abalone = abalone[abalone$sex!="I:]
X=abalone[,2:9]
Y=abalone[,1]
Y
abalone = abalone[abalone$sex!="I",]
X=abalone[,2:9]
Y=abalone[,1]
Y
levels(Y)=c("M","F")
factor(Y)=c("M","F")
factor(Y)<-c("M","F")
factors(Y)<-c("M","F")
pairs(X[,5:7],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
pairs(X[,5:9],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
pairs(X[,5:8],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
pairs(X[,1:8],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
rm(list=ls())
load(file="abalone.rda")
X=abalone[,2:9]
Y=abalone[,1]
pairs(X[,1:8],col=fcol(X,cols=c(1:5)),main="multi variable gradient, nn PCA of X1...X5")
