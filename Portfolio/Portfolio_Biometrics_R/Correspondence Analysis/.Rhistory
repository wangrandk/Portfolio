sep = ";", dec = ",")
prostate1<-prostate[,-c(1,11)]
dim(prostate1)
summary(prostate1)
par(mfrow=c(1,1))
boxplot(prostate1)
lm1 <- lm(lpsa ~ ., data = prostate1)
summary(lm14)
par(mfrow=c(2,3))
plot(lm1,1:6)
lm12<-step(lm1)
drop1(lm12,test="F")
drop1(lm13<-update(lm12,~.-age),test="F")
drop1(lm14<-update(lm13,~.-lbph),test="F")
#drop1(lm15<-update(lm14,~.-svi),test="F")
logLik(lm14)
2*5-2*logLik(lm14) #2* totol no. of varables - 2*loglik(model)
AIC(lm14)
# > AIC(lm14)
# [1] 213.9851
# Residual standard error: 0.7072
# > AIC(lm15)
# [1] 214.8515
# Residual standard error: 0.7139
summary(lm14)
par(mfrow=c(2,2))
plot(lm14)
# Cook's distance identifies cases that are influential or have a large effect on the regression solution and may be distorting the solution for the remaining cases in the analysis.Generally these are points that are distant from other points in the data
#R-squared = Explained variation / Total variation.
#R-squared does not indicate whether a regression model is adequate.
#residual standard error = variance/n = sigma^2/n
#d. lcavol is most significant that matches the answer in a.
#f.(1) residual check
par(mfrow = c(3, 3))
for (i in 1:8) {
plot(lm14$residuals ~ prostate1[,i], type = "n", xlab = names(prostate1)[i])
text(prostate1[,i], lm14$residuals, labels = row.names(prostate1))
lines(lowess(prostate1[,i], lm14$residuals), col = "blue")
}
library(reshape2)
library(ggplot2)
prostate1$residuals<-resid(lm14)
prostate2 <- melt(prostate1, measure.vars=c(1:4,6,8))
p <- ggplot(prostate2, aes(value, residuals))
p <- p + geom_point(shape=1)
p <- p + geom_smooth(method = lm) #loess
p <- p + facet_wrap(~ variable, scales="free")
print(p)
prostate1$residuals<-resid(lm14)
prostate2 <- melt(prostate1, measure.vars=c(1:4,6,8))
p <- ggplot(prostate2, aes(value, residuals))
p <- p + geom_point(shape=1)
p <- p + geom_smooth(method = loess) #loess
p <- p + facet_wrap(~ variable, scales="free")
print(p)
summary(prostate3)
# prostate3$age<-sqrt(prostate3$age)
# prostate3$pgg45<-sqrt(prostate3$pgg45)
lm2 <- lm(lpsa ~ .^2, data = prostate1)
summary(lm2)
par(mfrow=c(2,3))
plot(lm2,1:6)
#Residual standard error: 0.6968
#f.(2) influential obs 30,55,37
#prostate3<-prostate1[-30,]
boxplot(prostate3[1:9])
#lm2 <- lm(lpsa ~ .^2, data = prostate3)
summary(lm3)
lm3<-step(lm2)
drop1(lm3,test="F")
# drop1(lm4<-update(lm3,~.-1),test="F")
# drop1(lm4<-update(lm3,~.-lcavol:gleason),test="F")
# drop1(lm5<-update(lm4,~.-lweight:svi),test="F")
# drop1(lm6<-update(lm5,~.-lcavol:pgg45),test="F")
# drop1(lm7<-update(lm6,~.-age:gleason),test="F")
drop1(lm4<-update(lm3,~.-lcavol:pgg45),test="F")
drop1(lm4<-update(lm3,~.-lcp:pgg45),test="F")
drop1(lm5<-update(lm4,~.-lcavol:pgg45),test="F")
# drop1(lm6<-update(lm5,~.-lcavol:pgg45),test="F")
# drop1(lm7<-update(lm6,~.-age:gleason),test="F")
#drop1(lm8<-update(lm7,~.-age:lcp),test="F")
summary(lm5)
par(mfrow=c(2,2))
plot(lm5)
AIC(lm5)
# AIC(lm7)
# [1] 192.473
# Residual standard error: 0.6051 better!!!
# > AIC(lm8)
# [1] 194.2455
# Residual standard error: 0.6133
#confident interval
library(reshape2)
library(ggplot2)
prostate1$residuals<-resid(lm5)
prostate2 <- melt(prostate1, measure.vars=c(1:4,6,8))
p <- ggplot(prostate2, aes(value, residuals))
p <- p + geom_point(shape=1)
p <- p + geom_smooth(method = lm) #loess
p <- p + facet_wrap(~ variable, scales="free")
print(p)
prostate1$residuals<-resid(lm5)
prostate2 <- melt(prostate1, measure.vars=c(1:4,6,8))
p <- ggplot(prostate2, aes(value, residuals))
p <- p + geom_point(shape=1)
p <- p + geom_smooth(method = loess) #loess
p <- p + facet_wrap(~ variable, scales="free")
print(p)
library(gplots)
filled.contour(prostate1, main="Protein-Protein Interaction Potential")
# prediction
predict(lm8, prostate3[,c(1:9)], interval = 'confidence')
predict(lm8, prostate3[,c(1:9)], interval = 'prediction')
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/PCA")
JCFiris<-read.csv("Fisher_JCF.csv",header=T,sep =";",dec=",")
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 1:4) boxplot(iris[,i] ~ iris[,5],
col = 1:3, main = names(iris)[i])
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 2:5) boxplot(JCFiris[,i] ~ JCFiris[,1],
col = 1:3, main = names(JCFiris)[i])
outlier<-JCFiris[JCFiris[,5]>100,]
# X PW PL SW  SL
# 42 virginica 21 54 31 699
JCFiris1<-JCFiris[-42,]
summary(JCFiris)
str(JCFiris1)
#replace with median
JCFiris[42,5]=58
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 2:5) boxplot(JCFiris[,i] ~ JCFiris[,1],
col = 1:3, main = names(JCFiris)[i])
pairs(iris,col = iris$Species)
cov(iris[,1:4])
cor(iris[,1:4])
##WITHOUT Standardization - ONLY with centering####
irisPC_without=PCA(scale(iris[,1:4], scale = FALSE))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(irisPC_without, col = iris$Species, main = "Scores")
loadingplot(irisPC_without, show.names = TRUE, main = "Loadings")
biplot(irisPC_without, score.col = iris$Species, main = "biplot")
screeplot(irisPC_without, type = "percentage", main = "Explained variance")
##with both####
library(ChemometricsWithRData)
library(ChemometricsWithR)
JCFiris<-read.csv("Fisher_JCF.csv",header=T,sep =";",dec=",")
View(JCFiris)
summary(JCFiris)
head(JCFiris)
library(ChemometricsWithRData)
library(ChemometricsWithR)
data(iris)
View(iris)
head(iris)
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 1:4) boxplot(iris[,i] ~ iris[,5],
col = 1:3, main = names(iris)[i])
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 2:5) boxplot(JCFiris[,i] ~ JCFiris[,1],
col = 1:3, main = names(JCFiris)[i])
outlier<-JCFiris[JCFiris[,5]>100,]
# X PW PL SW  SL
# 42 virginica 21 54 31 699
JCFiris1<-JCFiris[-42,]
summary(JCFiris)
str(JCFiris1)
#replace with median
JCFiris[42,5]=58
par(mar=c(4,2,3,2),mfrow=c(2,2))
for (i in 2:5) boxplot(JCFiris[,i] ~ JCFiris[,1],
col = 1:3, main = names(JCFiris)[i])
pairs(iris,col = iris$Species)
cov(iris[,1:4])
cor(iris[,1:4])
##WITHOUT Standardization - ONLY with centering####
irisPC_without=PCA(scale(iris[,1:4], scale = FALSE))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(irisPC_without, col = iris$Species, main = "Scores")
loadingplot(irisPC_without, show.names = TRUE, main = "Loadings")
biplot(irisPC_without, score.col = iris$Species, main = "biplot")
screeplot(irisPC_without, type = "percentage", main = "Explained variance")
screeplot(leb, type = "percentage", main = "Explained variance")
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/Correspondence Analysis")
Lebart <- read.table("Lebart.txt", header = TRUE,sep = "", dec = ",")
head(Lebart)
View(Lebart)
library(ca)
leb<-ca(Lebart)
leb
plot(leb)
screeplot(leb, type = "percentage", main = "Explained variance")
plot(leb)
par(mfrow=c(1,1))
plot(leb)
screeplot(leb, type = "percentage", main = "Explained variance")
leb.eigenvalues
leb$eigenvalues
str(leb)
summary(leb)
leb$cum
leb$cum%
leb$dim
plot(leb, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE))
plot3d.ca(ca(leb, nd=3))
install.packages("rgl")
rm(list=ls())
Lebart <- read.table("Lebart.txt", header = TRUE,sep = "", dec = ",")
head(Lebart)
library(ca)
leb<-ca(Lebart)
leb
par(mfrow=c(1,1))
plot(leb)
plot(leb, type = "percentage", main = "Explained variance")
summary(leb)
plot(leb, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE))
plot3d.ca(ca(leb, nd=3))
plot3d(ca(leb, nd=3))
plot3d.ca(leb, nd=3)
plot3d.ca(Lebart, nd=3)
chisqresults <- chisq.test(Lebart)
chisqresults
chisqresults$observed
chisqresults$expected
sum((chisqresults$observed-chisqresults$expected)^2/chisqresults$expected)
EU <- read.table("EU.txt", header = TRUE,sep = "", dec = ",")
chisqresults
summary(leb)
nphis <- (chisqresults$observed-chisqresults$expected)/sqrt(chisqresults$expected)
nphis
sum(nphis^2)
sum(Lebart)
chi<-sum((chisqresults$observed-chisqresults$expected)^2/chisqresults$expected)
chival<-sum((chisqresults$observed-chisqresults$expected)^2/chisqresults$expected)
n=sum(Lebart)
sum(chival)/n
summary(leb)
nphis <- (chisqresults$observed-chisqresults$expected)/sqrt(chisqresults$expected)
nphis
inertial<-sumchival/n
inertial<-(chival)/n
inertial
inertial1<-nphis/sqrt(n)
inertial1
inertial1<-sum(nphis)/sqrt(n)
inertial1
phis<-nphis/sqrt(n)
inertial1<-sum(phis)
inertial1
inertial1<-sum(phis^2)
inertial1
phis
pcaofphis <- prcomp(phis, center=FALSE)
pcaofphis
chival
nphis
pcaofphis
leb
round(100*pcaofphis$sdev^2/sum(pcaofphis$sdev^2),2)
round(pcaofphis$sdev^2/sum(pcaofphis$sdev^2),2)
round(100*pcaofphis$sdev^2/sum(pcaofphis$sdev^2),2)
phis
round(100*pcaofphis$sdev^2/sum(pcaofphis$sdev^2),2)
biplot(pcaofphis)
pcaofphis
biplot(pcaofphis, main = "biplot")
?biplot
EU <- read.table("EU.txt", header = TRUE,sep = "", dec = ",")
head(EU)
EU <- read.table("EU.txt", header = TRUE,sep = "", dec = ",")
head(EU)
eu<-ca(EU)
par(mfrow=c(1,1))
plot(eu)
plot(eu, type = "percentage", main = "Explained variance")
summary(eu)
?ca
eu<-ca(EU,nd=4)
eu<-ca(EU,nd=2)
plot(eu)
plot(eu, type = "percentage", main = "Explained variance")
eu<-ca(EU)
par(mfrow=c(1,1))
plot(eu)
plot(eu, type = "percentage", main = "Explained variance")
plot(leb, type = "percentage", main = "Explained variance")
summary(eu)
plot(eu, mass = TRUE, contrib = "absolute", map =
"rowgreen", arrows = c(FALSE, TRUE))
plot3d.ca(eu, nd=3)
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/PCA")
JCFiris<-read.csv("Fisher_JCF.csv",header=T,sep =";",dec=",")
summary(JCFiris)
iris[,1:4]
head(iris)
summary(JCFiris)
EU <- read.table("EU.txt", header = TRUE,sep = "", dec = ",")
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/Correspondence Analysis")
EU <- read.table("EU.txt", header = TRUE,sep = "", dec = ",")
head(EU)
chi <- chisq.test(EU)
chi
src <- (chi$observed-chi$expected)/sqrt(chi$expected)
chi <- chisq.test(EU)
src <- (chi$observed-chi$expected)/sqrt(chi$expected)
chi <- chisq.test(EU)
src <- (chi$observed-chi$expected)/sqrt(chi$expected)
chi
sum(src^2)
inertial<-(chi)/sum(EU)
chi
chival
chisqresults
chi <- chisq.test(EU)
src <- (chi$observed-chi$expected)/sqrt(chi$expected)
sum(src^2)
inertial<-chi/sum(EU)
sum(EU)
inertial<-(chival)/n
inertial
chival
chisqresults
chi <- chisq.test(EU)
chieu <- sum((chi$observed-chi$expected)^2)/(chi$expected)
chieu
chieu <- sum((chi$observed-chi$expected)^2/(chi$expected))
chieu
inertial<-chieu/sum(EU)
inertial
inertias<-chieu/sum(EU)
phi<-src/sqrt(sum(EU))
inertias1<-sum(phi^2)
inertias1
inertias
euPC <- PCA(scale(eu))
library(ChemometricsWithRData)
library(ChemometricsWithR)
euPC <- PCA(scale(eu))
library(ChemometricsWithRData)
library(ChemometricsWithR)
euPC <- PCA(scale(eu))
eu
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
str(eu)
str(EU)
EU[1]
EU[2]
EU[1,:]
EU(1,:)
EU[1,1:15]
"
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, main = "Scores")
par(mfrow=c(1,2))
library(ChemometricsWithR)
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
biplot(EUPC, score.col = EU$Species, main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, col = EU$Species, main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
biplot(EUPC, score.col = EU$Species, main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
PCAphi <- prcomp(phi, center=FALSE)
round(100*PCAphi$sdev^2/sum(PCAphi$sdev^2),2)
biplot(PCAphi, main = "biplot",options=)
PCAphi <- prcomp(phi, center=FALSE)
round(100*PCAphi$sdev^2/sum(PCAphi$sdev^2),2)
eu
PCAphi <- prcomp(phi, center=FALSE)
round(100*PCAphi$sdev^2/sum(PCAphi$sdev^2),2)
biplot(PCAphi, main = "biplot")
par(fmrow=c(1,1))
par(mfrow=c(1,1))
biplot(PCAphi, main = "biplot")
phi
eu
PCAphi <- prcomp(EU, center=FALSE)
round(100*PCAphi$sdev^2/sum(PCAphi$sdev^2),2)
par(mfrow=c(1,1))
biplot(PCAphi, main = "biplot")
PCAphi <- prcomp(phi, center=FALSE)
round(100*PCAphi$sdev^2/sum(PCAphi$sdev^2),2)
par(mfrow=c(1,1))
biplot(PCAphi, main = "biplot")
plot(eu, "validation", estimate = c("CV"), val.type = "R2",
legendpos = "bottomright")
plot(eu, "validation", estimate = c("CV"), val.type = "R2",
legendpos = "bottomright")
library(ChemometricsWithR)
EUPC <- PCA(scale(phi))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, col = EU$Species, main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
biplot(EUPC, score.col = EU$Species, main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
library(ChemometricsWithRData)
library(ChemometricsWithR)
EUPC <- PCA(scale(phi),scale = FALSE)
library(ChemometricsWithRData)
library(ChemometricsWithR)
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, col = EU$Species, main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
biplot(EUPC, score.col = EU$Species, main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
EUPC <- PCA(scale(EU),scale = FALSE)
EU
summary(EU)
STRY(EU)
str(EU)
EU$obs
EU.obs
EU[1]
col=EU
col
colnames(EU, do.NULL = TRUE, prefix = "col")
rownames(EU)
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC, col = rownames(EU), main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
scoreplot(EUPC, col = colnames(EU), main = "Scores")
scoreplot(EUPC, col = as.numeric.colnames(EU), main = "Scores")
?as.numeric
scoreplot(EUPC, col = as.numeric(colnames(EU)), main = "Scores")
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC,  main = "Scores")
loadingplot(EUPC, show.names = TRUE, main = "Loadings")
biplot(EUPC,  main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
?scoreplot
EUPC <- PCA(scale(EU))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC,pc = c(1, 2),show.names = TRUE, pcscores = scores(EUPC) main = "Scores")
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC,pc = c(1, 2),show.names = TRUE, pcscores = scores(EUPC), main = "Scores")
loadingplot(EUPC,  pc = c(1, 2), pcloadings = loadings(EUPC),show.names = TRUE, main = "Loadings")
biplot(EUPC, show.names = "both",score.col=1,loading.col=blue, main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
loadingplot(EUPC,  pc = c(1, 2), pcloadings = loadings(EUPC),show.names = TRUE, main = "Loadings")
par(mar=c(4,2,3,2),mfrow=c(2,2))
par(mar=c(4,2,3,2),mfrow=c(2,2))
scoreplot(EUPC,pc = c(1, 2),show.names = TRUE, pcscores = scores(EUPC), main = "Scores")
loadingplot(EUPC,  pc = c(1, 2), pcloadings = loadings(EUPC),show.names = TRUE, main = "Loadings")
biplot(EUPC, show.names = "both",score.col=1,loading.col="blue", main = "biplot")
screeplot(EUPC, type = "percentage", main = "Explained variance")
EUPC$var
EUPC
par(mfrow=c(1,2))
plot(1:length(EUPC$var), EUPC$var, cex = 2,
ylab = "variance explained",xlab = "n PC")
lines(1:length(EUPC$var), EUPC$var)
plot(1:length(EUPC$var), cumsum(EUPC$var/sum(EUPC$var)), cex = 2,
ylab = "(explained variance)/(total variance)",xlab = "n PC")
lines(1:length(EUPC$var), cumsum(EUPC$var/sum(EUPC$var)))
pairs(scores(EUPC), col = EU$Species)
par(mfrow = c(4,4), mar = c(4,4,.1,.1))
for (i in 1:4) for (j in 1:4) loadingplot(EUPC,
show.names = TRUE,pc=c(i,j), cex.lab=0.7)
EU.pca <- prcomp(EU,
center = TRUE,
scale. = TRUE)
library(devtools)
install.packages("rtool")
library(devtools)
# First time install: install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 1,groups = EU[,5], ellipse = TRUE,circle = FALSE)
print(g)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 1,groups = EU, ellipse = TRUE,circle = FALSE)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 1,groups = EU[,17], ellipse = TRUE,circle = FALSE)
print(g)
g <- ggbiplot(EU.pca, obs.scale = 3, var.scale = 1,groups = EU[,17], ellipse = TRUE,circle = FALSE)
print(g)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 3,groups = EU[,17], ellipse = TRUE,circle = FALSE)
print(g)
EU.pca <- prcomp(EU)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 1,groups = EU[,17], ellipse = TRUE,circle = FALSE)
print(g)
EU.pca <- prcomp(EU,
center = TRUE)
g <- ggbiplot(EU.pca, obs.scale = 1, var.scale = 1,groups = EU[,17], ellipse = TRUE,circle = FALSE)
print(g)
library(chemometrics)
install.packages("rpart")
EUPCA <- princomp(EU, cor = TRUE)
res <- pcaDiagplot(EU, EUPCA, a = 2)
library(chemometrics)
EUPCA <- princomp(EU, cor = TRUE)
res <- pcaDiagplot(EU, EUPCA, a = 2)
par(mfrow=c(1,2))
plot(res$SDist, res$ODist, type = "n")
text(res$SDist, res$ODist, labels = row.names(EU))
## Explained variance for each variable
pcaVarexpl(EU[,1:4],a=2) #a  number of principal components
pcaVarexpl(EU,a=2) #a  number of principal components
par(mfrow=c(2,2))
for (i in 1:17) {
res=pcaDiagplot(EU[,1:17],a=i,EUPCA,plot=FALSE)
plot(res$SDist,res$ODist,type="n")
text(res$SDist,res$ODist,labels=row.names(EU))
}
