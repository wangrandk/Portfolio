rm(list=ls())
prostate <- read.table("prostatedata.txt", header = TRUE,sep = ";", dec = ",")
setwd("C:/Users/RAN/OneDrive/Documents/BioDataAnalysis/Data/PCR")
prostate <- read.table("prostatedata.txt", header = TRUE,sep = ";", dec = ",")
head(prostate)
#prostate1<-prostate[,-c(1)]
prostate$X<-as.matrix(prostate[,2:9])
prostate_TEST <- prostate[prostate$train == FALSE,]
prostate_TRAIN <- prostate[prostate$train == TRUE,]
View(prostate$X)
library(pls)
m1<-pcr(lpsa~X,ncomp=8,data=prostate_TRAIN,validation="LOO",scale=T,jackknife=T)
par(mfrow=c(2,2))
plot(m1,labels = rownames(prostate_TRAIN),which="validation")
plot(m1,"validation",estimate=c("train","CV"),legendpos="topright")
plot(m1, "validation", estimate = c("train", "CV"), val.type = "R2",
legendpos = "bottomright")
scoreplot(m1, labels = rownames(prostate_TRAIN))
str(prostate)
summary(prostate_TEST)
m1
par(mfrow=c(2,2))
plot(m1,labels = rownames(prostate_TRAIN),which="validation")
plot(m1,"validation",estimate=c("train","CV"),legendpos="topright")
plot(m1,"validation",estimate=c("train","CV"),val.type ="MSEP",legendpos="bottomright")
scoreplot(m1, labels = rownames(prostate_TRAIN))
par(mfrow=c(2,2))
plot(m1,labels = rownames(prostate_TRAIN),which="validation")
plot(m1,"validation",estimate=c("train","CV"),val.type ="MSEP",legendpos="topright")
plot(m1,"validation",estimate=c("train","CV"),val.type ="R2",legendpos="bottomright")
scoreplot(m1, labels = rownames(prostate_TRAIN))
segCV <- pcr(lpsa~X , ncomp = 7, data = prostate_TRAIN, scale = TRUE,validation = "CV", segments = 5, segment.type = "consecutive",jackknife = TRUE)
summary(segCV)
par(mfrow=c(1,1))
plot(segCV, "validation", estimate = c("train", "CV"), legendpos = "topright")
plot(segCV, "validation", estimate = c("train", "CV"), val.type = "R2",
legendpos = "bottomright")
scoreplot(m1, comps = 1:3, labels = rownames(prostate_TRAIN))
loadingplot(m1,comps = 1:3, scatter = TRUE, labels = names(prostate_TRAIN))
scoreplot(segCV, comps = 1:3, labels = rownames(prostate_TRAIN))
loadingplot(segCV,comps = 1:3, scatter = TRUE, labels = names(prostate_TRAIN))
segCV <- pcr(lpsa~X , ncomp = 7, data = prostate_TRAIN, scale = TRUE,validation = "CV", segments = 15, segment.type = "consecutive",jackknife = TRUE)
summary(segCV)
segCV <- pcr(lpsa~X , ncomp = 7, data = prostate_TRAIN, scale = TRUE,validation = "CV", segments = 5, segment.type = "consecutive",jackknife = TRUE)
summary(segCV)
m2 <- pcr(lpsa~X , ncomp = 3, data = prostate_TRAIN, validation = "LOO",scale = TRUE, jackknife = TRUE)
par(mfrow = c(2, 2))
k=3
fit <- predplot(m2, labels = rownames(prostate_TRAIN), which = "validation")
View(fit)
View(fit)
Residuals <- fit[,1] - fit[,2]
plot(fit[,2], Residuals, type="n", main = k, xlab = "Fitted", ylab = "Residuals")
text(fit[,2], Residuals, labels = rownames(prostate_TRAIN))
line(fit[,2], Residuals)
lines(fit[,2], Residuals)
lines(Residuals,fit[,2])
lines(Residuals,fit[,2])
lines(fit[,1], Residuals)
par(mfrow = c(2, 2))
k=3
fit <- predplot(m2, labels = rownames(prostate_TRAIN), which = "validation")
Residuals <- fit[,1] - fit[,2]
plot(fit[,2], Residuals, type="n", main = k, xlab = "Fitted", ylab = "Residuals")
text(fit[,2], Residuals, labels = rownames(prostate_TRAIN))
lines(fit[,1], Residuals)
qqnorm(Residuals)
# To plot residuals against X-leverage, we need to find the X-leverage:
# AND then find the leverage-values as diagonals of the Hat-matrix:
# Based on fitted X-values:
Xf <- scores(m2)
H <- Xf %*% solve(t(Xf) %*% Xf) %*% t(Xf)
leverage <- diag(H)
plot(leverage, abs(Residuals), type = "n", main = k)
text(leverage, abs(Residuals), labels = rownames(prostate_TRAIN))
scoreplot(segCV, comps = 1:3, labels = rownames(prostate_TRAIN))
#Loadings:
loadingplot(segCV,comps = 1:3, scatter = TRUE, labels = names(prostate_TRAIN))
Xf <- scores(m2)
H <- Xf %*% solve(t(Xf) %*% Xf) %*% t(Xf)
leverage <- diag(H)
plot(leverage, abs(Residuals), type = "n", main = k)
text(leverage, abs(Residuals), labels = rownames(prostate_TRAIN))
plot(leverage, (Residuals), type = "n", main = k)
text(leverage, (Residuals), labels = rownames(prostate_TRAIN))
par(mfrow=c(3,3))
for ( i in 2:9){
plot(Residuals~prostate_TRAIN[,i],type="n",xlab=names(prostate_TRAIN)[i])
text(prostate_TRAIN[,i],Residuals,labels=row.names(prostate_TRAIN))
lines(lowess(prostate_TRAIN[,i],Residuals),col="blue")
}
par(mfrow=c(3,3))
for ( i in 2:9){
plot(Residuals~prostate_TRAIN[,i],type="n",xlab=names(prostate_TRAIN)[i])
text(prostate_TRAIN[,i],Residuals,labels=row.names(prostate_TRAIN))
lines(lm(prostate_TRAIN[,i],Residuals),col="blue")
}
par(mfrow=c(3,3))
for ( i in 2:9){
plot(Residuals~prostate_TRAIN[,i],type="n",xlab=names(prostate_TRAIN)[i])
text(prostate_TRAIN[,i],Residuals,labels=row.names(prostate_TRAIN))
lines(lm(prostate_TRAIN[,i],Residuals),col="blue")
}
par(mfrow=c(3,3))
for ( i in 2:9){
plot(Residuals~prostate_TRAIN[,i],type="n",xlab=names(prostate_TRAIN)[i])
text(prostate_TRAIN[,i],Residuals,labels=row.names(prostate_TRAIN))
lines(lowess(prostate_TRAIN[,i],Residuals),col="blue")
}
dim(Residuals)
par(mfrow = c(2, 2))
fit <- predplot(m2, labels = rownames(prostate_TRAIN), which = "validation")
abline(lm(fit[,2] ~ fit[,1]))
plot(m2, "validation", estimate = c("train", "CV"), val.type = "R2",
legendpos = "bottomright")
coefplot(m2, se.whiskers = TRUE, labels = prednames(m2), cex.axis = 1.5)
biplot(m2)
jack.test(m2, ncomp = 3)
dim(preds)
dim(preds)
preds <- predict(m2, newdata = prostate_TEST, comps = 3)
plot(prostate_TEST$lpsa, preds)
summary(prostate_TEST$lpsa)
install.packages("ca")
install.packages("pca3d")
install.packages("plsRglm")
install.packages("pls")
install.packages(c("bootstrap", "cairoDevice", "forecast", "Hmisc", "manipulate", "nnet", "RcppArmadillo", "RcppEigen", "sjPlot", "tseries", "visreg"))
